# Name of the run / output folder
run_name: "CNN_SSCI"


########## TRAINING PARAMETERS ##########
training_mode: 'sup'  # 'custom_unsup', 'sup', 'ae', 'max_ampl', 'sup_using_gan'
train_model: True
test_model: True

# If no new model is trained, path of old model needs to be given here
# load_model_path: 'SIPSENSIN_test_190523/EQ_CNN_1D_multi_outs1_depth10_kernel_size3_max_channels5_0000.pt'
load_model_path: 'CNN_SSCI/EQ_CNN_1D.pt'

# Number of training iterations
training_iters: 10000 #  20000 #10000 #15000 # 15000 100000 #50000
# Train multiple models to check stability
training_runs: 1
# Learning rate
learning_rate: 0.0001 # 0.005
# Set optimizer of generator, RMSprop seems to work best for KL-Div
optimize_func: "Adam"  # "Adam", "Adadelta", "Adamax", "ASGD", "RMSprop"
# Learning rate scheduler milestones
lrs_milestones: None
#  - 10000
#  - 20000
#  - 30000
#  - 40000
lrs_gamma: 0.1 # 1.5s
# Only for ae, used to calc threshold between normal and abnormal samples like: mean(normal_loss) + threshold_std_fac * std(normal_loss)
threshold_std_fac: 2
# Only for ae and max_ampl, always use optimal threshold for evaluation
use_optimal_threshold: True




########## DATASET PARAMETERS ##########
# Path to dataset in parquet format: MODIFY THIS PATH TO POINT TO YOUR CUSTOM DATASET
dataset_path: "/HDD/ney/SIPSENSIN_labeled_data/labeled_rawdata_removed_single_class_pumps.parquet"
#input_x_data_path: "/HDD/ney/SIPSENSIN_labeled_data/labeled_rawdata_removed_single_class_pumps.parquet"
#input_y_data_path: "/HDD/ney/SIPSENSIN_labeled_data/labeled_rawdata_removed_single_class_pumps.parquet"
#input_z_data_path: "/HDD/ney/SIPSENSIN_labeled_data/labeled_rawdata_removed_single_class_pumps.parquet"
#gt_data_path: "/HDD/ney/SIPSENSIN_labeled_data/labeled_rawdata_removed_single_class_pumps.parquet"
# Set value of gt class for normal and abnormal samples
value_normal_class: 0 # -10
value_anormal_class: 1 # 10
# Equally distribute normal and anormal samples in training set
equally_distributed_train_data: False
# Remove specific pump from training set and use this pump for testing
test_pump_generalization: True
# This pump will be removed from training set
pump_eval_idx: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 86, 91, 97, 102, 105, 106] #0
normalize_inputs: True
used_fixed_mean_std: True
sample_wise_normalization: False
apply_low_pass_filter: False
# Only for max_ampl
max_dim: 'y'
subtract_mean_from_input: False
do_remove_pumps_with_only_one_class: True

########## MODEL PARAMETERS ##########
# Type of neural network model
model_type: "CNN_1D"     # "CNN_1D", "CNN_1D_AE", "LSTM_1D_AE", "CNN_1D_Additional_Input"
additional_input: "none" # "max_ampl", "none"
channels_in: 3
# For CNN_1D: Number of convolutional layers, For CNN_1D_AE: Number of convolutional layers in encoder and decoder respectively, for LSTM number of lstm layers
depth: 2 #10 #3
# Set number of channels between convolutional layers
intermediate_channels: 3
batch_size: 50 # 10 # 1, 256
# Number of values in input sequence
input_symbols: 800
# Kernel size of convolutional layers
kernel_size: 5 # 21
# Calc multiple outputs in one run, --> increase stride of fist layer and channels of last layer
multi_outs: 1
# Only for CNN_1D: type of last layer, "global_average" or "fully_connected"
last_layer_type: "global_average"
# Only for CNN_1D_AE: number of channels of latent space
inner_channels: 5
# Only for CNN_1D_AE: Use pooling layers in encoder and decoder
use_pooling: True
# Only for LSTM_1D_AE: Number of hidden units in LSTM, corresponds to size of latent space
embedding_dim: 400
export_model_as_onnx: False


########## SWEEP PARAMETERS ##########
#sweep: None
sweep: { # set to None or comment out for no parameter sweep
  sweep_name:                   "SIPSENSIN_CNN_short_sweep",
  reuse_model_initialization:   True,  # if True, same model initialization is used throughout all parameter configurations
  #parameter:                       ["kernel_size"],
  #values:                         [3, 9, 15, 21, 27, 33, 39, 45, 51, 57, 63, 69]
  #parameter:                       ["intermediate_channels"],
  #values:                         [[1, 2, 3, 4, 5, 7, 9, 11, 13, 15, 20, 25]]
  #parameter:                      ["depth", "kernel_size", "intermediate_channels"],
  #values:                         [[4, 6, 8, 10], [11, 15, 19, 23], [5, 10, 15, 20]]
  parameter:                       ["pump_eval_idx"],
  values:                          [[0, 1, 2, 3]] # [[1, 2]] #[["all"]]
}


